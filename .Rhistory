geom_jitter
library(ggplot2)
geom_jitter
# O de forma más explícita
ggplot2::geom_jitter
methods(class = "GeomPoint")
methods(class = "geom_jitter")
methods(class = "geom_point")
methods(class = "GeomPoint")
browseURL("https://github.com/tidyverse/ggplot2/blob/main/R/geom-jitter.r")
p <- ggplot(mpg, aes(cyl, hwy))
p + geom_point()
p + geom_jitter()
p <- ggplot(mpg, aes(cyl, mpg))
p + geom_point()
p <- ggplot(mpg, aes(mpg, hwy))
p + geom_point()
p <- ggplot(mpg, aes(cty, hwy))
p + geom_point()
p + geom_jitter()
p + geom_jitter(aes(colour = class))
p + geom_point()
p + geom_jitter2D(aes(colour = class))
p + geom_jitter(aes(colour = class))
library(devtools)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?ggproto
width<-NULL
width > 0
width  %||% (resolution(data$x, zero = FALSE, TRUE) * 0.4)
??resolution
?jitter
?mvtnorm
jitter
intersect
# 2) bivariate normal jitter --------------------
# instead or runif use mvnorm() for the noise
vv <- mpg |> select(hwy, cyl) |> var()
noise <- rmvnorm( nrow(mpg), sigma = vv )
# 2) bivariate normal jitter --------------------
# instead or runif use mvnorm() for the noise
vv <- mpg |> select(hwy, cyl) |> var()
noise <- rmvnorm( nrow(mpg), sigma = vv )
library(rvnorm)
library(rmvnorm)
library(mvtnorm)
# 2) bivariate normal jitter --------------------
# instead or runif use mvnorm() for the noise
vv <- mpg |> select(hwy, cyl) |> var()
noise <- rmvnorm( nrow(mpg), sigma = vv )
# 0) pkgs -------
library(ggplot2)
library(dplyr)
library(mvtnorm)
library(rngWELL)
library(randtoolbox)
# 1) regular jitter ------------------
p <- ggplot(mpg, aes(cyl, hwy))
p + geom_jitter()
# jitter by hand
mpg |>
mutate(hwy = hwy + runif( n(), -.5, .5) ) |>
mutate( cyl = cyl + runif(n(), -.5, .5) ) |>
ggplot() + geom_point( aes(cyl, hwy) ) +
geom_jitter(data = mpg, aes(cyl, hwy), color = 'red', alpha = .3)
# 2) bivariate normal jitter --------------------
# instead or runif use mvnorm() for the noise
vv <- mpg |> select(hwy, cyl) |> var()
noise <- rmvnorm( nrow(mpg), sigma = vv )
noise
head(noise)
devtools::document()
data<-mpg
width = NULL
height = NULL
seed = NA
width  <- width  %||% (resolution(data$x, zero = FALSE, TRUE) * 0.4)
height <- height %||% (resolution(data$y, zero = FALSE, TRUE) * 0.4)
#' @rdname Position
#' @format NULL
#' @usage NULL
#' @export
PositionJitter2D <- ggproto("PositionJitter2D", Position,
seed = NA,
required_aes = c("x", "y"),
setup_params = function(self, data) {
if (!is.null(self$seed) && is.na(self$seed)) {
seed <- sample.int(.Machine$integer.max, 1L)
} else {
seed <- self$seed
}
list(
width = self$width,
height = self$height,
seed = seed
)
},
compute_panel = function(self, data, params, scales) {
compute_jitter2D(data, params$width, params$height, seed = params$seed)
}
)
width  <- width  %||% (resolution(data$x, zero = FALSE, TRUE) * 0.4)
height <- height %||% (resolution(data$y, zero = FALSE, TRUE) * 0.4)
vv <- data |> select(y, x) |> var()
data |> select(y, x) |> var()
vv <- var(data$y, data$x)
devtools::document()
library(devtools)
devtools::document()
PositionJitter2D <- ggproto("PositionJitter2D", Position,
seed = NA,
required_aes = c("x", "y"),
setup_params = function(self, data) {
if (!is.null(self$seed) && is.na(self$seed)) {
seed <- sample.int(.Machine$integer.max, 1L)
} else {
seed <- self$seed
}
list(
width = self$width,
height = self$height,
seed = seed
)
},
compute_panel = function(self, data, params, scales) {
compute_jitter2D(data, params$width, params$height, seed = params$seed)
}
)
data<- mpg
width = NULL
height = NULL
seed = NA
width  <- width  %||% (resolution(data$x, zero = FALSE, TRUE) * 0.4)
x<-data$cyl
y<-data$hwy
vv <- var(data$y, data$x)
compute_jitter2D <- function(data, width = NULL, height = NULL, seed = NA) {
width  <- width  %||% (resolution(data$x, zero = FALSE, TRUE) * 0.4)
height <- height %||% (resolution(data$y, zero = FALSE, TRUE) * 0.4)
vv <- var(data$y, data$x)
noise <- rmvnorm( nrow(data), sigma = vv )
# trans_x <- if (width > 0)  function(x) jitter(x, amount = width)
# trans_y <- if (height > 0) function(x) jitter(x, amount = height)
trans_x <- noise[ , 2]
trans_y <- noise[ , 1]
x_aes <- intersect(ggplot_global$x_aes, names(data))
x <- if (length(x_aes) == 0) 0 else data[[x_aes[1]]]
y_aes <- intersect(ggplot_global$y_aes, names(data))
y <- if (length(y_aes) == 0) 0 else data[[y_aes[1]]]
jitter <- data_frame0(x = x, y = y, .size = nrow(data))
jitter <- with_seed_null(seed, transform_position(jitter, trans_x, trans_y))
x_jit <- jitter$x - x
x_jit[is.infinite(x)] <- 0
y_jit <- jitter$y - y
y_jit[is.infinite(y)] <- 0
transform_position(data, function(x) x + x_jit, function(x) x + y_jit)
}
devtools::document()
data<-mpg
source("~/Documents/Research/R_packages/jitter2D/R/position-jitter2D.R", echo = TRUE)
mpg |>
ggplot() +geom_jitter2D(aes(x= cyl, y =hwy))
source("~/Documents/Research/R_packages/jitter2D/R/geom-jitter2D.R", echo = TRUE)
mpg |>
ggplot() +geom_jitter2D(aes(x= cyl, y =hwy))
?list2
library(rlang)
source("~/Documents/Research/R_packages/jitter2D/R/geom-jitter2D.R", echo = TRUE)
source("~/Documents/Research/R_packages/jitter2D/R/position-jitter2D.R", echo = TRUE)
mpg |>
ggplot() +geom_jitter2D(aes(x= cyl, y =hwy))
?intersect
?transform_position
source("~/Documents/Research/R_packages/jitter2D/R/position-jitter2D.R", echo = TRUE)
devtools::document()
source("~/Documents/Research/R_packages/jitter2D/R/position-jitter2D.R", echo = TRUE)
source("~/Documents/Research/R_packages/jitter2D/R/geom-jitter2D.R", echo = TRUE)
mpg |>
ggplot() +geom_jitter2D(aes(x= cyl, y =hwy))
# 0) pkgs -------
library(ggplot2)
library(dplyr)
library(mvtnorm)
library(rngWELL)
library(randtoolbox)
# 1) regular jitter ------------------
p <- ggplot(mpg, aes(cyl, hwy))
mpg |>
ggplot() +geom_jitter2D(aes(x= cyl, y =hwy))
mpg |>
mutate(hwy = hwy + .3*noise[,1] ) |>
mutate( cyl = cyl + .3*noise[,2]  ) |>
ggplot( ) + geom_point( aes(cyl, hwy) ) +
geom_jitter(data = mpg, aes(cyl, hwy), color = 'red', alpha = .3 )
# 2) bivariate normal jitter --------------------
# instead or runif use mvnorm() for the noise
vv <- mpg |> select(hwy, cyl) |> var()
noise <- rmvnorm( nrow(mpg), sigma = vv )
mpg |>
mutate(hwy = hwy + .3*noise[,1] ) |>
mutate( cyl = cyl + .3*noise[,2]  ) |>
ggplot( ) + geom_point( aes(cyl, hwy) ) +
geom_jitter(data = mpg, aes(cyl, hwy), color = 'red', alpha = .3 )
mpg |>
ggplot() +geom_jitter2D(aes(x= cyl, y =hwy))
source("~/Documents/Research/R_packages/jitter2D/R/geom-jitter2D.R", echo = TRUE)
mpg |>
ggplot() +geom_jitter2D(aes(x= cyl, y =hwy))
?list2D
?list2
library(rlang)
mpg |>
ggplot() +geom_jitter2D(aes(x= cyl, y =hwy))
source("~/Documents/Research/R_packages/jitter2D/R/geom-jitter2D.R", echo = TRUE)
mpg |>
ggplot() +geom_jitter2D(aes(x= cyl, y =hwy))
source("~/Documents/Research/R_packages/jitter2D/R/position-jitter2D.R", echo = TRUE)
mpg |>
ggplot() +geom_jitter2D(aes(x= cyl, y =hwy))
position_jitter2D <- function(width = NULL, height = NULL, seed = NA) {
ggproto(NULL, PositionJitter2D,
width = width,
height = height,
seed = seed
)
}
#' @rdname ggplot2-ggproto
#' @format NULL
#' @usage NULL
#' @export
PositionJitter2D <- ggproto("PositionJitter2D", Position,
width = NULL,
height = NULL,
seed = NA,
setup_params = function(self, data) {
if (!is.null(self$seed) && is.na(self$seed)) {
seed <- sample.int(.Machine$integer.max, 1L)
} else {
seed <- self$seed
}
list(
width = self$width,
height = self$height,
seed = seed
)
},
compute_panel = function(self, data, params, scales) {
compute_jitter2D(data, params$width, params$height, seed = params$seed)
}
)
source("~/Documents/Research/R_packages/jitter2D/R/geom-jitter2D.R", echo = TRUE)
ggplot() +geom_jitter2D(aes(x= cyl, y =hwy))
# 0) pkgs -------
library(ggplot2)
library(dplyr)
library(mvtnorm)
library(rngWELL)
library(randtoolbox)
library(rlang)
source("~/Documents/Research/R_packages/jitter2D/R/position-jitter2D.R", echo = TRUE)
source("~/Documents/Research/R_packages/jitter2D/R/geom-jitter2D.R", echo = TRUE)
mpg |>
ggplot() +geom_jitter2D(aes(x= cyl, y =hwy))
source("~/Documents/Research/R_packages/jitter2D/R/position-jitter2D.R", echo = TRUE)
mpg |>
ggplot() +geom_jitter2D(aes(x= cyl, y =hwy))
source("~/Documents/Research/R_packages/jitter2D/R/position-jitter2D.R", echo = TRUE)
mpg |>
ggplot() +geom_jitter2D(aes(x= cyl, y =hwy))
source("~/Documents/Research/R_packages/jitter2D/R/position-jitter2D.R", echo = TRUE)
mpg |>
ggplot() +geom_jitter2D(aes(x= cyl, y =hwy))
mpg |>
ggplot() +geom_jitter2D(aes(x= cyl, y =hwy), width = 0.5)
mpg |>
ggplot() +geom_jitter2D(aes(x= cyl, y =hwy), width = 0.1)
names(mpg)
mpg |>
ggplot() +geom_jitter2D(aes(x= cty, y =hwy), width = 0.1)
mpg |>
ggplot() +geom_point(aes(x= cty, y =hwy))
mpg |>
ggplot() +geom_jitter2D(aes(x= cty, y =hwy), width = 0.1)
devtools::document()
load_all()
library(devtools)
devtools::document()
library(devtools)
devtools::document()
' p <- ggplot(mpg, aes(cty, hwy))
#' p + geom_point()
p <- ggplot(mpg, aes(cty, hwy))
p + geom_point()
p + geom_jitter2D()
p <- ggplot(mpg, aes(cty, hwy))
p + geom_point()
p + geom_jitter2D()
